diagnosticMode:
  enabled: true

global:
  security:
    allowInsecureImages: true

image:
  repository: dlavrenuek/bitnami-mongodb-arm
  tag: "6.0"
  debug: true

architecture: replicaset
auth:
  enabled: true
  rootUser: root

replicaSetName: rs0
replicaSetHostnames: true

## @param directoryPerDB Switch to enable/disable DirectoryPerDB on MongoDB(&reg;)
## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#enablingdisabling-directoryperdb
##
directoryPerDB: false

systemLogVerbosity: 0
disableSystemLog: false

## @param disableJavascript Switch to enable/disable MongoDB(&reg;) server-side JavaScript execution
## ref: https://docs.mongodb.com/manual/core/server-side-javascript/
##
disableJavascript: false

## @param enableJournal Switch to enable/disable MongoDB(&reg;) Journaling
## ref: https://docs.mongodb.com/manual/reference/configuration-options/#mongodb-setting-storage.journal.enabled
##
enableJournal: true

configuration: ""

replicaSetConfigurationSettings:
  enabled: false

resourcesPreset: "small"
resources: {}

initContainers: []
## This is an optional 'mongo-labeler' sidecar container that tracks replica-set for the primary mongodb pod
## and labels it dynamically with ' primary: "true" ' in order for an extra-deployed service to always expose
## and attach to the primary pod, this needs to be uncommented along with the suggested 'extraDeploy' example
## and the suggested rbac example for the pod to be allowed adding labels to mongo replica pods
## search 'mongo-labeler' through this file to find the sections that needs to be uncommented to make it work
##
## - name: mongo-labeler
##   image: korenlev/k8s-mongo-labeler-sidecar
##   imagePullPolicy: Always
##   env:
##     - name: LABEL_SELECTOR
##       value: "app.kubernetes.io/component=mongodb,app.kubernetes.io/instance=mongodb,app.kubernetes.io/name=mongodb"
##     - name: NAMESPACE
##       value: "the-mongodb-namespace"
##     - name: DEBUG
##       value: "true"
##

passwordUpdateJob:
  enabled: false
  ## @param passwordUpdateJob.previousPasswords.rootPassword Previous root password (set if the password secret was already changed)
  ## @param passwordUpdateJob.previousPasswords.existingSecret Name of a secret containing the previous passwords (set if the password secret was already changed)
  previousPasswords:
    rootPassword: ""
    existingSecret: ""
persistence:
  enabled: true
  name: "datadir"
  storageClass: "nfs-csi"
  accessModes:
    - ReadWriteOnce
  size: 8Gi
persistentVolumeClaimRetentionPolicy:
  enabled: false
  whenScaled: Retain
  whenDeleted: Retain

volumePermissions:
  enabled: true
  resourcesPreset: "nano"
  resources: {}

arbiter:
  enabled: true

readinessProbe:
  initialDelaySeconds: 40

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    ## @param metrics.serviceMonitor.namespace Namespace which Prometheus is running in
    ##
    namespace: "monitoring"
    interval: 30s
  prometheusRule:
    enabled: true
    additionalLabels: {}
    namespace: "monitoring"
    ## @param metrics.prometheusRule.rules Rules to be created, check values for an example
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#rulegroup
    ##      https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
    ##
    ## This is an example of a rule, you should add the below code block under the "rules" param, removing the brackets
    ## rules:
    ## - alert: HighRequestLatency
    ##   expr: job:request_latency_seconds:mean5m{job="myjob"} > 0.5
    ##   for: 10m
    ##   labels:
    ##     severity: page
    ##   annotations:
    ##     summary: High request latency
    ##
    rules: []
